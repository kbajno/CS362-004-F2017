        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:#define TESTUNIT "buyCard"
        -:   11:
        -:   12:
function main called 1 returned 100% blocks executed 81%
        1:   13:int main() {
        -:   14:
        -:   15:	//print out what card we are testing
        1:   16:	printf("TESTING  UNIT: %s \n", TESTUNIT);
call    0 returned 100%
        -:   17:
        1:   18:	int i = 0;
        1:   19:	int rSeed = 10; //seed num
        1:   20:	int player = 0; //current player
        1:   21:	int numPlayers = 2; //total players
        1:   22:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        -:   24:	struct gameState state, preState; //holds game state
        1:   25:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   26:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   27:
        -:   28:	//initialize the game state and player cards
        1:   29:	initializeGame(numPlayers, k, rSeed, &state);
call    0 returned 100%
        1:   30:	memcpy(&preState, &state, sizeof(struct gameState));
        -:   31:
        -:   32:	//test no more buys
        1:   33:	state.numBuys = 0;
        1:   34:	int cardBuyNoMore = buyCard(adventurer, &state);
call    0 returned 100%
        -:   35:
        -:   36:	//reset the game
        1:   37:	memcpy(&state, &preState, sizeof(struct gameState));
        -:   38:
        -:   39:	//test no card type
        1:   40:	state.supplyCount[adventurer] = 0;
        1:   41:	int cardBuyNoAvail = buyCard(adventurer, &state);
call    0 returned 100%
        -:   42:
        -:   43:	//reset the game
        1:   44:	memcpy(&state, &preState, sizeof(struct gameState));
        -:   45:
        -:   46:	//test no enough money
        1:   47:	state.coins = 0;
        1:   48:	int cardBuyNoCoins = buyCard(adventurer, &state);
call    0 returned 100%
        -:   49:
        -:   50:	//reset the game
        1:   51:	memcpy(&state, &preState, sizeof(struct gameState));
        -:   52:
        -:   53:	//test card buy success
        1:   54:	int cardBuySuccess = buyCard(adventurer, &state);
call    0 returned 100%
        -:   55:
        -:   56:	/*Testing*/
        -:   57:
        1:   58:	printf("\nTest 1: Adventurer buy success\n");
call    0 returned 100%
        -:   59:
        1:   60:	if (cardBuySuccess == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:		printf("PASS: Player hand pile increased = %d, expected = 1\n", (state.handCount[player] - preState.handCount[player]));
call    0 never executed
        -:   62:	}
        -:   63:
        -:   64:	else{
        1:   65:		printf("FAIL: Player hand pile increased = %d, expected = 1\n", (state.handCount[player] - preState.handCount[player]));
call    0 returned 100%
        -:   66:
        -:   67:	}
        -:   68:
        1:   69:	printf("\nTest 2: Buy fails because no buys are left\n");
call    0 returned 100%
        -:   70:
        1:   71:	if (cardBuyNoMore == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   72:		printf("PASS: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 returned 100%
        -:   73:	}
        -:   74:
        -:   75:	else{
    #####:   76:		printf("FAIL: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 never executed
        -:   77:
        -:   78:	}
        -:   79:
        1:   80:	printf("\nTest 3: Buy fails because no card available\n");
call    0 returned 100%
        -:   81:	
        1:   82:	if (cardBuyNoAvail == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   83:		printf("PASS: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 returned 100%
        -:   84:	}
        -:   85:
        -:   86:	else{
    #####:   87:		printf("FAIL: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 never executed
        -:   88:	}
        -:   89:
        1:   90:	printf("\nTest 4: Buy fails because no money\n");
call    0 returned 100%
        -:   91:
        1:   92:	if (cardBuyNoCoins == -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   93:		printf("PASS: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 returned 100%
        -:   94:	}
        -:   95:
        -:   96:	else{
    #####:   97:		printf("FAIL: Hand count expected = %d, actual = %d\n", preState.handCount[player] , state.handCount[player] );
call    0 never executed
        -:   98:	}
        -:   99:
        -:  100:
        1:  101:	printf("\nTest 5: Card is added to hand\n");
call    0 returned 100%
        -:  102:
        1:  103:	if (preState.handCount[player] + 1 == state.handCount[player]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  104:		printf("PASS: Hand count expected = %d, actual = %d\n", preState.handCount[player] + 1 , state.handCount[player] );
call    0 never executed
        -:  105:	}
        -:  106:
        -:  107:	else{
        1:  108:		printf("FAIL: Hand count expected = %d, actual = %d\n", preState.handCount[player] + 1 , state.handCount[player] );
call    0 returned 100%
        -:  109:	}	
        -:  110:
        1:  111:	printf("\nTest 6: Check for proper coins\n");
call    0 returned 100%
        -:  112:
        1:  113:	if (state.coins == preState.coins + getCost(adventurer)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  114:		printf("PASS: Coins expected = %d, actual = %d\n", preState.coins + getCost(adventurer) , state.coins);
call    0 never executed
call    1 never executed
        -:  115:	}
        -:  116:
        -:  117:	else{
        1:  118:		printf("FAIL: Coins expected = %d, actual = %d\n", preState.coins + getCost(adventurer), state.coins);
call    0 returned 100%
call    1 returned 100%
        -:  119:	}
        -:  120:
        1:  121:	printf("\n");
call    0 returned 100%
        -:  122:
        1:  123:	return 0;
        -:  124:}
