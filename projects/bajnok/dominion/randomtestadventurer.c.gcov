        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:#define TESTUNIT "adventurer"
        -:   11:
        -:   12:
function main called 1 returned 100% blocks executed 91%
        1:   13:int main() {
        -:   14:
        -:   15:
        -:   16:	int i, n, p, deckCount, discardCount, handCount, rSeed, numPlayers;
        1:   17:	int totalFails = 0;
        1:   18:	int totalPass = 0;
        1:   19:	int totalTests = 0;
        1:   20:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   21:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   22:	//int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        -:   24:
        -:   25:	struct gameState G, preG;
        -:   26:
        -:   27:	//print out what card we are testing
        1:   28:	printf("RANDOM TESTING: %s \n", TESTUNIT);
call    0 returned 100%
        -:   29:
     2001:   30:	for (n = 0; n < 2000; n++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:		
        -:   32:		/*initialize game state (num of players, cards, and seed)*/
        -:   33:
     2000:   34:		i = 0;
     2000:   35:		rSeed = rand(); //seed num
call    0 returned 100%
     2000:   36:		numPlayers = rand() % 3 + 2; //total players btwn 2-4
call    0 returned 100%
     2000:   37:		initializeGame(numPlayers, k, rSeed, &G); //initialize
call    0 returned 100%
     2000:   38:		memcpy(&preG, &G, sizeof(struct gameState)); //cpy over to save pre-state before calling card
        -:   39:
        -:   40:		/*generate random cards and decks for players*/
        -:   41:
     2000:   42:		p = whoseTurn(&G); //get cur player for adjusting deck
call    0 returned 100%
        -:   43:
        -:   44:		//rand cards in deck
     2000:   45:		deckCount = rand() % MAX_DECK;
call    0 returned 100%
     2000:   46:		G.deckCount[p] = deckCount;
        -:   47:
   489763:   48:		for (i = 0; i < deckCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   487763:   49:			G.deck[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   50:		}
        -:   51:
        -:   52:		//rand cards in hand
     2000:   53:		handCount = rand() % MAX_HAND;
call    0 returned 100%
     2000:   54:		G.handCount[p] = handCount;
        -:   55:
   504365:   56:		for (i = 0; i < handCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   502365:   57:			G.hand[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   58:		}
        -:   59:
        -:   60:		//rand cards in discard
     2000:   61:		discardCount = rand() % MAX_DECK;
call    0 returned 100%
     2000:   62:		G.discardCount[p] = discardCount;
        -:   63:
   505246:   64:		for (i = 0; i < discardCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   503246:   65:			G.discard[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   66:		}
        -:   67:
        -:   68:		/*Pre-Adventurer Played*/
        -:   69:
     2000:   70:		int preTreasure = 0;
     2000:   71:		int preHandCount = G.handCount[p];
     2000:   72:		int prePlayedCount = G.playedCardCount;
     2000:   73:		int preDiscardCount = G.discardCount[p];
     2000:   74:		int preDeckCount = G.deckCount[p];
        -:   75:
        -:   76:
   504365:   77:		for (i = 0; i < G.handCount[p]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   502365:   78:		if(G.hand[p][i] == copper || G.hand[p][i] == silver || G.hand[p][i] == gold) 
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
    58163:   79:			preTreasure++;
        -:   80:		}
        -:   81:
        -:   82:		/*printf("Test %d pretreasure is %d\n", n, preTreasure);
        -:   83:		printf("Test %d handCount is %d\n", n, G.handCount[p]);
        -:   84:		printf("Test %d deckCount is %d\n", n, G.deckCount[p]);
        -:   85:		printf("Test %d discardCount is %d\n", n, G.discardCount[p]);
        -:   86:		printf("Test %d playerCount is %d\n", n, numPlayers);*/
        -:   87:
        -:   88:		/*Adventurer Played*/
     2000:   89:		cardEffect(adventurer, 1, 1, 1, &G, 0, 0);
call    0 returned 100%
        -:   90:
        -:   91:		/*Post-adventurer played*/
        -:   92:
        -:   93:		//treasures in hand after call
     2000:   94:		int postTreasure = 0; 
        -:   95:
   514365:   96:		for (i = 0; i < G.handCount[p]; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   512365:   97:			if(G.hand[p][i] == copper || G.hand[p][i] == silver || G.hand[p][i] == gold) 
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
    62821:   98:				postTreasure++;
        -:   99:		}
        -:  100:
     2000:  101:		int postDeckCount = G.deckCount[p];
     2000:  102:		int postDiscardCount = G.discardCount[p];
        -:  103:
        -:  104:		/*Testing*/
        -:  105:
        -:  106:		//printf("\nTest 1: Adventurer properly played from hand\n");
        -:  107:
        -:  108:		//test fails
     2000:  109:		if (G.playedCardCount != (prePlayedCount+1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  110:			printf("SEED %d FAIL: Played pile increased = %d, expected = 1\n", rSeed, (G.playedCardCount - prePlayedCount));
call    0 never executed
    #####:  111:			totalFails++;
    #####:  112:			totalTests++;
        -:  113:
        -:  114:		}
        -:  115:		else{
     2000:  116:			totalPass++;
     2000:  117:			totalTests++;
        -:  118:		}
        -:  119:
        -:  120:
        -:  121:		//printf("\nTest 2: Player's hand has +2 treasure cards\n");
        -:  122:
        -:  123:		//test fails
     2000:  124:		if ((preTreasure + 2) != postTreasure){
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
      836:  125:			printf("SEED %d FAIL: expected treasures in hand = %d, actual = %d\n", rSeed, (preTreasure + 2) , postTreasure);
call    0 returned 100%
      836:  126:			totalFails++;
      836:  127:			totalTests++;
        -:  128:		} 
        -:  129:		else{
     1164:  130:			totalPass++;
     1164:  131:			totalTests++;
        -:  132:		}
        -:  133:		//printf("\nTest 3: Player's hand only has +2 cards\n");
        -:  134:
        -:  135:		//test fails
     2000:  136:		if ((preHandCount + 1) != G.handCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:  137:			printf("SEED %d FAIL: expected hand count = %d, actual = %d\n", (preHandCount + 1) , G.handCount[p]);
call    0 returned 100%
     2000:  138:			totalFails++;
     2000:  139:			totalTests++;
        -:  140:		}
        -:  141:		else{
    #####:  142:			totalPass++;
    #####:  143:			totalTests++;
        -:  144:		}
        -:  145:		//printf("\nTest 4: Non-treasure cards drawn were discarded\n");
        -:  146:
     2000:  147:		if( (preDiscardCount + ((preDeckCount - postDeckCount))) == postDiscardCount ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  148:			printf("SEED %d FAIL: expected non-treasure discard= %d, actual = %d\n",  preDiscardCount + ((preDeckCount - postDeckCount)), postDiscardCount);
call    0 never executed
    #####:  149:			totalFails++;
    #####:  150:			totalTests++;
        -:  151:		}
        -:  152:		else{
     2000:  153:			totalPass++;
     2000:  154:			totalTests++;
        -:  155:		}
        -:  156:
        -:  157:	}
        -:  158:
        1:  159:	printf("\nTotal tests: %d, Successful: %d, Failed: %d\n", totalTests, totalPass, totalFails);
call    0 returned 100%
        -:  160:
        -:  161:
        1:  162:	printf("\n");
call    0 returned 100%
        -:  163:
        1:  164:	return 0;
        -:  165:}
