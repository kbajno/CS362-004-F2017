        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:#define TESTUNIT "smithy"
        -:   11:
        -:   12:
function main called 1 returned 100% blocks executed 91%
        1:   13:int main() {
        -:   14:
        -:   15:
        -:   16:	int i, n, p, deckCount, discardCount, handCount, rSeed, numPlayers;
        1:   17:	int totalFails = 0;
        1:   18:	int totalPass = 0;
        1:   19:	int totalTests = 0;
        1:   20:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   21:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   22:	//int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:
        -:   24:
        -:   25:	struct gameState G, preG;
        -:   26:
        -:   27:	//print out what card we are testing
        1:   28:	printf("RANDOM TESTING: %s \n", TESTUNIT);
call    0 returned 100%
        -:   29:
     2001:   30:	for (n = 0; n < 2000; n++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   31:		
        -:   32:		/*initialize game state (num of players, cards, and seed)*/
        -:   33:
     2000:   34:		i = 0;
     2000:   35:		rSeed = rand(); //seed num
call    0 returned 100%
     2000:   36:		numPlayers = rand() % 3 + 2; //total players btwn 2-4
call    0 returned 100%
     2000:   37:		initializeGame(numPlayers, k, rSeed, &G); //initialize
call    0 returned 100%
     2000:   38:		memcpy(&preG, &G, sizeof(struct gameState)); //cpy over to save pre-state before calling card
        -:   39:
        -:   40:		/*generate random cards and decks for players*/
        -:   41:
     2000:   42:		p = whoseTurn(&G); //get cur player for adjusting deck
call    0 returned 100%
        -:   43:
        -:   44:		//rand cards in deck
     2000:   45:		deckCount = rand() % MAX_DECK;
call    0 returned 100%
     2000:   46:		G.deckCount[p] = deckCount;
        -:   47:
   489763:   48:		for (i = 0; i < deckCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   487763:   49:			G.deck[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   50:		}
        -:   51:
        -:   52:		//rand cards in hand
     2000:   53:		handCount = rand() % MAX_HAND;
call    0 returned 100%
     2000:   54:		G.handCount[p] = handCount;
        -:   55:
   504365:   56:		for (i = 0; i < handCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   502365:   57:			G.hand[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   58:		}
        -:   59:
        -:   60:		//rand cards in discard
     2000:   61:		discardCount = rand() % MAX_DECK;
call    0 returned 100%
     2000:   62:		G.discardCount[p] = discardCount;
        -:   63:
   505246:   64:		for (i = 0; i < discardCount; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   503246:   65:			G.discard[p][i] = rand() % treasure_map;
call    0 returned 100%
        -:   66:		}
        -:   67:
        -:   68:		/*Pre-Smithy Played*/
        -:   69:
     2000:   70:		int preHandCount = G.handCount[p];
     2000:   71:		int prePlayedCount = G.playedCardCount;
     2000:   72:		int preDiscardCount = G.discardCount[p];
     2000:   73:		int preDeckCount = G.deckCount[p];
        -:   74:
        -:   75:		/*Smithy Played*/
     2000:   76:		cardEffect(smithy, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        -:   77:
        -:   78:		/*Post-smithy played*/
        -:   79:
        -:   80:		/*Testing*/
        -:   81:
        -:   82:		//printf("\nTest 1: Smithy properly played from hand\n");
        -:   83:
        -:   84:		//test fails
     2000:   85:		if (G.playedCardCount != (prePlayedCount+1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:   86:			printf("SEED %d FAIL: Played pile increased = %d, expected = 1\n", rSeed, (G.playedCardCount - prePlayedCount));
call    0 returned 100%
     2000:   87:			totalFails++;
     2000:   88:			totalTests++;
        -:   89:		}
        -:   90:		else{
    #####:   91:			totalPass++;
    #####:   92:			totalTests++;
        -:   93:
        -:   94:		}
        -:   95:
        -:   96:
        -:   97:		//printf("\nTest 2: Player's hand has +3 cards\n");
        -:   98:
        -:   99:		//test fails
     2000:  100:		if ((preHandCount + 2) != G.handCount[p]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:  101:			printf("SEED %d FAIL: expected hand count = %d, actual = %d\n", rSeed, (preHandCount + 2) , G.handCount[p]);
call    0 returned 100%
     2000:  102:			totalFails++;
     2000:  103:			totalTests++;
        -:  104:		}
        -:  105:		else{
    #####:  106:			totalPass++;
    #####:  107:			totalTests++;		
        -:  108:
        -:  109:		} 
        -:  110:
        -:  111:		//printf("\nTest 3: Player's deck has -3 cards\n");
        -:  112:
        -:  113:		//test fails
     2000:  114:		if ( (preDeckCount - 3) != G.deckCount[p]){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       11:  115:			printf("SEED %d FAIL: expected deck count = %d, actual = %d\n", rSeed, (preDeckCount-3) , G.deckCount[p]);
call    0 returned 100%
       11:  116:			totalFails++;
       11:  117:			totalTests++;
        -:  118:		}
        -:  119:		else{
     1989:  120:			totalPass++;
     1989:  121:			totalTests++;	
        -:  122:		} 
        -:  123:
        -:  124:		//printf("\nTest 4: No change to kingdom or victory piles\n");
        -:  125:
    56000:  126:		for (i = curse; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  127:		{
        -:  128:			//printf("Card %d - supply count before: %d, supply count after: %d\n", i, startG.supplyCount[i], G.supplyCount[i]);
        -:  129:			//test fails
    54000:  130:			if (G.supplyCount[i] != preG.supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:				printf("SEED %d FAIL: card %d expected supply = %d, actual = %d\n", rSeed, i, preG.supplyCount[i], G.supplyCount[i]);
call    0 never executed
    #####:  132:				totalFails++;
    #####:  133:				totalTests++;
        -:  134:			}
        -:  135:
        -:  136:			else{
    54000:  137:				totalPass++;
    54000:  138:				totalTests++;
        -:  139:
        -:  140:			}
        -:  141:		}
        -:  142:
        -:  143:
        -:  144:	}
        -:  145:
        1:  146:	printf("\nTotal tests: %d, Successful: %d, Failed: %d\n", totalTests, totalPass, totalFails);
call    0 returned 100%
        -:  147:
        -:  148:
        1:  149:	printf("\n");
call    0 returned 100%
        -:  150:
        1:  151:	return 0;
        -:  152:}
