        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:
        -:    8:/*Code style inspired by cardtest4.c provided on Canvas*/
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:#define UNITTEST "supplyCount"
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 81%
        1:   22:int main() {
        -:   23:
        -:   24:	//print out what card we are testing
        1:   25:	printf("Unit Test: %s \n", UNITTEST);
call    0 returned 100%
        -:   26:
        1:   27:	int i = 0;
        1:   28:	int rSeed = 10; //seed num
        1:   29:	int player = 0; //current player
        1:   30:	int numPlayers = 2; //total players
        1:   31:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   32:
        -:   33:	struct gameState state, preState; //holds game state
        1:   34:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   36:
        -:   37:	//initialize the game state and player cards
        1:   38:	initializeGame(numPlayers, k, rSeed, &state);
call    0 returned 100%
        1:   39:	memcpy(&preState, &state, sizeof(struct gameState));
        -:   40:
        -:   41:
        -:   42:	/*Pre-adventurer played*/
        -:   43:
        1:   44:	state.supplyCount[adventurer] = 5;
        1:   45:	int count = supplyCount(adventurer, &state);
call    0 returned 100%
        -:   46:
        -:   47:
        -:   48:	/*Testing*/
        -:   49:
        1:   50:	printf("\nTest 1: Proper supply count\n");
call    0 returned 100%
        -:   51:
        1:   52:	if (count == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   53:		printf("PASS: Supply expected: %d, got: %d\n", 5, count);
call    0 returned 100%
        -:   54:
        -:   55:	}
        -:   56:	else{
    #####:   57:		printf("FAIL: Supply expected: %d, got: %d\n", 5, count);
call    0 never executed
        -:   58:
        -:   59:	}
        -:   60:
        1:   61:	printf("\nTest 1: Embargo supply wasn't adjusted\n");
call    0 returned 100%
        -:   62:
        1:   63:	if (state.supplyCount[embargo] == preState.supplyCount[embargo]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   64:		printf("PASS: Supply expected: %d, got: %d\n", preState.supplyCount[embargo], state.supplyCount[embargo]);
call    0 returned 100%
        -:   65:
        -:   66:	}
        -:   67:	else{
    #####:   68:		printf("FAIL: Supply expected: %d, got: %d\n", preState.supplyCount[embargo], state.supplyCount[embargo]);
call    0 never executed
        -:   69:
        -:   70:	}
        -:   71:
        1:   72:	printf("\nTest 1: village supply wasn't adjusted\n");
call    0 returned 100%
        -:   73:
        1:   74:	if (state.supplyCount[village] == preState.supplyCount[village]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   75:		printf("PASS: Supply expected: %d, got: %d\n", preState.supplyCount[village], state.supplyCount[village]);
call    0 returned 100%
        -:   76:
        -:   77:	}
        -:   78:	else{
    #####:   79:		printf("FAIL: Supply expected: %d, got: %d\n", preState.supplyCount[village], state.supplyCount[village]);
call    0 never executed
        -:   80:
        -:   81:	}
        -:   82:
        1:   83:	printf("\nTest 1: minion supply wasn't adjusted\n");
call    0 returned 100%
        -:   84:
        1:   85:	if (state.supplyCount[minion] == preState.supplyCount[minion]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   86:		printf("PASS: Supply expected: %d, got: %d\n", preState.supplyCount[minion], state.supplyCount[minion]);
call    0 returned 100%
        -:   87:
        -:   88:	}
        -:   89:	else{
    #####:   90:		printf("FAIL: Supply expected: %d, got: %d\n", preState.supplyCount[minion], state.supplyCount[minion]);
call    0 never executed
        -:   91:
        -:   92:	}
        -:   93:
        1:   94:	printf("\nTest 1: cutpurse supply wasn't adjusted\n");
call    0 returned 100%
        -:   95:
        1:   96:	if (state.supplyCount[cutpurse] == preState.supplyCount[cutpurse]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   97:		printf("PASS: Supply expected: %d, got: %d\n", preState.supplyCount[cutpurse], state.supplyCount[cutpurse]);
call    0 returned 100%
        -:   98:
        -:   99:	}
        -:  100:	else{
    #####:  101:		printf("FAIL: Supply expected: %d, got: %d\n", preState.supplyCount[cutpurse], state.supplyCount[cutpurse]);
call    0 never executed
        -:  102:
        -:  103:	}
        -:  104:
        -:  105:
        1:  106:	printf("\n");
call    0 returned 100%
        -:  107:
        1:  108:	return 0;
        -:  109:}
