        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:
        -:    8:/*Code style inspired by cardtest4.c provided on Canvas*/
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:#define TESTCARD "adventurer"
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 87%
        1:   22:int main() {
        -:   23:
        -:   24:	//print out what card we are testing
        1:   25:	printf("TESTING  CARD: %s \n", TESTCARD);
call    0 returned 100%
        -:   26:
        1:   27:	int i = 0;
        1:   28:	int rSeed = 10; //seed num
        1:   29:	int player = 0; //current player
        1:   30:	int numPlayers = 2; //total players
        1:   31:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   32:
        -:   33:	struct gameState state, preState; //holds game state
        1:   34:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   36:
        -:   37:	//initialize the game state and player cards
        1:   38:	initializeGame(numPlayers, k, rSeed, &state);
call    0 returned 100%
        1:   39:	memcpy(&preState, &state, sizeof(struct gameState));
        -:   40:
        -:   41:
        -:   42:	/*Pre-adventurer played*/
        -:   43:
        1:   44:	int preTreasure = 0;
        1:   45:	int preHandCount = state.handCount[player];
        1:   46:	int prePlayerTwoCount = state.handCount[1];
        1:   47:	int prePlayedCount = state.playedCardCount;
        1:   48:	int preDiscardCount = state.discardCount[player];
        1:   49:	int preDeckCount = state.deckCount[player];
        -:   50:
        -:   51:
        6:   52:	for (i = 0; i < state.handCount[0]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   53:		if(state.hand[player][state.handCount[i]] == copper || state.hand[player][state.handCount[i]] == silver || state.hand[player][state.handCount[i]] == gold) 
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        4:   54:			preTreasure++;
        -:   55:	}
        -:   56:
        -:   57:	//printf("preTreasure = %d, preHandCount = %d\n", preTreasure, preHandCount);
        -:   58:
        -:   59:	/*Adventurer Played*/
        1:   60:	cardEffect(adventurer, choice1, choice2, choice3, &state, handPos, &bonus);
call    0 returned 100%
        -:   61:
        -:   62:	/*Post-adventurer played*/
        -:   63:
        -:   64:
        -:   65:	//treasures in hand after call
        1:   66:	int postTreasure = 0; 
        -:   67:
       10:   68:	for (i = 0; i < state.handCount[0]; i++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9:   69:		if(state.hand[player][state.handCount[i]] == copper || state.hand[player][state.handCount[i]] == silver || state.hand[player][state.handCount[i]] == gold) 
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        6:   70:			postTreasure++;
        -:   71:	}
        -:   72:
        1:   73:	int postDeckCount = state.deckCount[player];
        1:   74:	int postDiscardCount = state.discardCount[player];
        -:   75:
        -:   76:
        -:   77:
        -:   78:	//printf("postTreasure = %d, postHandCount = %d\n", postTreasure, state.handCount[player]);
        -:   79:
        -:   80:
        -:   81:	/*Testing*/
        -:   82:
        1:   83:	printf("\nTest 1: Adventurer properly played from hand\n");
call    0 returned 100%
        -:   84:
        1:   85:	if (state.playedCardCount == (prePlayedCount+1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   86:		printf("PASS: Played pile increased = %d\n", (state.playedCardCount - prePlayedCount));
call    0 returned 100%
        -:   87:
        -:   88:	}
        -:   89:	else{
    #####:   90:		printf("FAIL: Played pile increased = %d, expected = 1\n", (state.playedCardCount - prePlayedCount));
call    0 never executed
        -:   91:
        -:   92:	}
        -:   93:
        -:   94:
        1:   95:	printf("\nTest 2: Player's hand has +2 treasure cards\n");
call    0 returned 100%
        -:   96:
        1:   97:	if ((preTreasure + 2) == postTreasure){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   98:		printf("PASS: expected = %d, actual = %d\n", (preTreasure + 2) , postTreasure);
call    0 returned 100%
        -:   99:
        -:  100:	}
        -:  101:	else{
    #####:  102:		printf("FAIL: expected = %d, actual = %d\n", (preTreasure + 2) , postTreasure);
call    0 never executed
        -:  103:
        -:  104:	} 
        -:  105:
        1:  106:	printf("\nTest 3: Player's hand only has +2 cards\n");
call    0 returned 100%
        -:  107:
        1:  108:	if ((preHandCount + 1) == state.handCount[player]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  109:		printf("PASS: expected = %d, actual = %d\n", (preHandCount + 1) , state.handCount[player]);
call    0 never executed
        -:  110:
        -:  111:	}
        -:  112:	else{
        1:  113:		printf("FAIL: expected = %d, actual = %d\n", (preHandCount + 1) , state.handCount[player]);
call    0 returned 100%
        -:  114:
        -:  115:	} 
        -:  116:
        1:  117:	printf("\nTest 4: Non-treasure cards drawn were discarded\n");
call    0 returned 100%
        -:  118:
        1:  119:	if( (preDiscardCount + ((preDeckCount - postDeckCount))) == postDiscardCount ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  120:		printf("PASS: expected = %d, actual = %d\n",  preDiscardCount + ((preDeckCount - postDeckCount)), postDiscardCount);
call    0 never executed
        -:  121:
        -:  122:	}
        -:  123:	else{
        1:  124:		printf("FAIL: expected = %d, actual = %d\n",  preDiscardCount + ((preDeckCount - postDeckCount)), postDiscardCount);
call    0 returned 100%
        -:  125:
        -:  126:	}
        -:  127:
        1:  128:	printf("\nTest 5: No change to player 2's hand\n");
call    0 returned 100%
        -:  129:
        1:  130:	if(prePlayerTwoCount == state.handCount[1] ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:		printf("PASS: expected cards = %d, actual cards = %d\n", prePlayerTwoCount , state.handCount[1]);
call    0 never executed
        -:  132:
        -:  133:	}
        -:  134:	else{
        1:  135:		printf("FAIL: expected cards = %d, actual cards = %d\n", prePlayerTwoCount , state.handCount[1]);
call    0 returned 100%
        -:  136:
        -:  137:	}
        -:  138:
        1:  139:	printf("\nTest 6: No change to kingdom or victory piles\n");
call    0 returned 100%
        -:  140:
       28:  141:	for (i = curse; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  142:	{
        -:  143:		//printf("Card %d - supply count before: %d, supply count after: %d\n", i, startG.supplyCount[i], G.supplyCount[i]);
       27:  144:		if (state.supplyCount[i] == preState.supplyCount[i]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:  145:			printf("PASS: card %d expected = %d, actual = %d\n", i, preState.supplyCount[i], state.supplyCount[i]);
call    0 returned 100%
        -:  146:		}
        -:  147:
        -:  148:		else{
    #####:  149:			printf("FAIL: card %d expected = %d, actual = %d\n", i, preState.supplyCount[i], state.supplyCount[i]);
call    0 never executed
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:
        1:  154:	printf("\n");
call    0 returned 100%
        -:  155:
        1:  156:	return 0;
        -:  157:}
