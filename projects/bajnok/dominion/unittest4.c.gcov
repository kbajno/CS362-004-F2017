        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest1.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:
        -:    8:/*Code style inspired by cardtest4.c provided on Canvas*/
        -:    9:
        -:   10:
        -:   11:#include "dominion.h"
        -:   12:#include "dominion_helpers.h"
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include "rngs.h"
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:#define UNITTEST "whoseTurn"
        -:   20:
        -:   21:
function main called 1 returned 100% blocks executed 80%
        1:   22:int main() {
        -:   23:
        -:   24:	//print out what card we are testing
        1:   25:	printf("Unit Test: %s \n", UNITTEST);
call    0 returned 100%
        -:   26:
        1:   27:	int i = 0;
        1:   28:	int rSeed = 10; //seed num
        1:   29:	int player = 0; //current player
        1:   30:	int numPlayers = 2; //total players
        1:   31:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   32:
        -:   33:	struct gameState state, preState; //holds game state
        1:   34:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   36:
        -:   37:	//initialize the game state and player cards
        1:   38:	initializeGame(numPlayers, k, rSeed, &state);
call    0 returned 100%
        1:   39:	memcpy(&preState, &state, sizeof(struct gameState));
        -:   40:
        -:   41:
        -:   42:	/*Pre-adventurer played*/
        -:   43:
        1:   44:	int turn = state.whoseTurn;
        1:   45:	int stateTurn = whoseTurn(&state);
call    0 returned 100%
        -:   46:
        -:   47:
        -:   48:
        -:   49:	/*Testing*/
        -:   50:
        1:   51:	printf("\nTest 1: Is correct turn\n");
call    0 returned 100%
        -:   52:
        1:   53:	if (stateTurn == turn){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   54:		printf("PASS: Turn for player expected: %d, got: %d\n", turn, stateTurn);
call    0 returned 100%
        -:   55:
        -:   56:	}
        -:   57:	else{
    #####:   58:		printf("FAIL: Turn for player expected: %d, got: %d\n", turn, stateTurn);
call    0 never executed
        -:   59:
        -:   60:	}
        -:   61:
        1:   62:	printf("\nTest 2: Is correct turn compared to prevState\n");
call    0 returned 100%
        -:   63:
        1:   64:	if (whoseTurn(&state) == whoseTurn(&preState)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   65:		printf("PASS: Turn for player expected: %d, got: %d\n", whoseTurn(&preState), whoseTurn(&state));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   66:
        -:   67:	}
        -:   68:	else{
    #####:   69:		printf("FAIL: Turn for player expected: %d, got: %d\n", whoseTurn(&preState), whoseTurn(&state));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   70:
        -:   71:	}
        -:   72:
        -:   73:
        1:   74:	printf("\n");
call    0 returned 100%
        -:   75:
        1:   76:	return 0;
        -:   77:}
