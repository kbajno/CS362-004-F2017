        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/*Code style inspired by cardtest4.c provided on Canvas*/
        -:    3:
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include <string.h>
        -:    8:#include <stdio.h>
        -:    9:#include <assert.h>
        -:   10:#include "rngs.h"
        -:   11:#include <stdlib.h>
        -:   12:
        -:   13:#define TESTCARD "feast"
        -:   14:
        -:   15:
function main called 1 returned 100% blocks executed 66%
        1:   16:int main() {
        -:   17:
        -:   18:	//print out what card we are testing
        1:   19:	printf("TESTING  CARD: %s \n", TESTCARD);
call    0 returned 100%
        -:   20:
        1:   21:	int i = 0;
        1:   22:	int rSeed = 10; //seed num
        1:   23:	int player = 0; //current player
        1:   24:	int numPlayers = 2; //total players
        1:   25:	int handPos = 0, choice1 = embargo, choice2 = 0, choice3 = 0, bonus = 0;
        -:   26:
        -:   27:	struct gameState state, preState; //holds game state
        1:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy, council_room}; //cards in game
        -:   30:
        -:   31:	//initialize the game state and player cards
        1:   32:	initializeGame(numPlayers, k, rSeed, &state);
call    0 returned 100%
        -:   33:
        -:   34:	//add the feast card to players hand 
        1:   35:	state.hand[player][0] = feast;
        -:   36:
        -:   37:	//gainCard(feast, &state, 2, player);
        1:   38:	memcpy(&preState, &state, sizeof(struct gameState));
        -:   39:
        -:   40:	/*Pre-feastplayed*/
        -:   41:
        1:   42:	int preHandCount = state.handCount[player];
        1:   43:	int prePlayerTwoCount = state.handCount[1];
        1:   44:	int prePlayedCount = state.playedCardCount;
        1:   45:	int preDiscardCount = state.discardCount[player];
        1:   46:	int preDeckCount = state.deckCount[player];
        -:   47:
        -:   48:
        -:   49:	/*feast Played*/
        1:   50:	cardEffect(feast, choice1, choice2, choice3, &state, handPos, &bonus);
call    0 returned 100%
        -:   51:
        -:   52:	/*Post-feast played*/
        -:   53:
        -:   54:	/*Testing*/
        -:   55:
        1:   56:	printf("\nTest 1: Feast properly trashed from hand\n");
call    0 returned 100%
        -:   57:
        1:   58:	if (fullDeckCount(player, feast, &state) == 0 && fullDeckCount(player, feast, &preState) == 1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:   59:		printf("PASS: expected = %d, actual = %d\n", fullDeckCount(player, feast, &preState) - 1 , fullDeckCount(player, feast, &state));
call    0 never executed
call    1 never executed
call    2 never executed
        -:   60:
        -:   61:	}
        -:   62:	else{
        1:   63:		printf("FAIL: expected = %d, actual = %d\n", fullDeckCount(player, feast, &preState) - 1 , fullDeckCount(player, feast, &state));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:   64:
        -:   65:	}
        -:   66:
        1:   67:	printf("\nTest 2: Feast is not in played pile\n");
call    0 returned 100%
        -:   68:
        1:   69:	int check = 0;
        -:   70:
        -:   71:	//check if card in played pile is equal to feast
        1:   72:	for(i = 0; i < state.playedCardCount; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   73:		if (state.playedCards[i] == TESTCARD){
branch  0 never executed
branch  1 never executed
    #####:   74:			printf("FAIL: Feast card is in played pile\n");
call    0 never executed
    #####:   75:			check = 1;
    #####:   76:			break;
        -:   77:		}
        -:   78:		else
    #####:   79:			check = 2;		
        -:   80:	}
        -:   81:
        1:   82:	if (check == 2 ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   83:		printf("PASS: No feast card in played pile\n");
call    0 never executed
        -:   84:	}
        -:   85:
        1:   86:	printf("\nTest 3: Player's hand is unchanged\n");
call    0 returned 100%
        -:   87:
        1:   88:	if ((preHandCount) == state.handCount[player]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   89:		printf("PASS: expected = %d, actual = %d\n", (preHandCount) , state.handCount[player]);
call    0 returned 100%
        -:   90:
        -:   91:	}
        -:   92:	else{
    #####:   93:		printf("FAIL: expected = %d, actual = %d\n", (preHandCount) , state.handCount[player]);
call    0 never executed
        -:   94:
        -:   95:	} 
        -:   96:
        1:   97:	printf("\nTest 4: Player recieved 5 coins\n");
call    0 returned 100%
        -:   98:
        1:   99:	if (state.coins == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  100:		printf("PASS: total coins expected = %d, actual = %d\n", (preState.coins + 5) - 2 , state.coins + 2);
call    0 returned 100%
        -:  101:
        -:  102:	}
        -:  103:	else{
    #####:  104:		printf("FAIL: total coins expected = %d, actual = %d\n",  (preState.coins + 5) - 2 , state.coins + 2);
call    0 never executed
        -:  105:
        -:  106:	} 
        -:  107:
        1:  108:	printf("\nTest 5: Can gain card costing < 5 coins (embargo = 2 coins)\n");
call    0 returned 100%
        -:  109:
        1:  110:	if(fullDeckCount(player, embargo, &state) == ((fullDeckCount(player, embargo, &preState) +1))){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  111:		printf("PASS: embargo count expected = %d, actual = %d\n", ((fullDeckCount(player, embargo, &preState) +1) , fullDeckCount(player, embargo, &state)));
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  112:
        -:  113:	}
        -:  114:	else{
    #####:  115:		printf("FAIL: embargo count expected = %d, actual = %d\n", ((fullDeckCount(player, embargo, &preState) +1) , fullDeckCount(player, embargo, &state)));
call    0 never executed
call    1 never executed
call    2 never executed
        -:  116:
        -:  117:	}
        -:  118:
        -:  119:
        -:  120:
        1:  121:	printf("\n");
call    0 returned 100%
        -:  122:
        1:  123:	return 0;
        -:  124:}
